    public BaseServiceResponse<Long> userEsQuery(RentSearch rentSearch)  {

        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();

        boolQuery.filter(
                QueryBuilders.termQuery(HouseIndexConstant.CITY_EN_NAME, rentSearch.getCityEnName())
        );

        if (rentSearch.getRegionEnName() != null && !"*".equals(rentSearch.getRegionEnName())) {
            boolQuery.filter(
                    QueryBuilders.termQuery(HouseIndexConstant.REGION_EN_NAME, rentSearch.getRegionEnName())
            );
        }
        //地区区间
        RentValueBlock area = RentValueBlock.matchArea(rentSearch.getAreaBlock());
        if (!RentValueBlock.ALL.equals(area)) {
            RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(HouseIndexConstant.AREA);
            if (area.getMax() > 0) {
                rangeQueryBuilder.lte(area.getMax());
            }
            if (area.getMin() > 0) {
                rangeQueryBuilder.gte(area.getMin());
            }
            boolQuery.filter(rangeQueryBuilder);
        }
       //价格区间
        RentValueBlock price = RentValueBlock.matchPrice(rentSearch.getPriceBlock());
        if (!RentValueBlock.ALL.equals(price)) {
            RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(HouseIndexConstant.PRICE);
            if (price.getMax() > 0) {
                rangeQuery.lte(price.getMax());
            }
            if (price.getMin() > 0) {
                rangeQuery.gte(price.getMin());
            }
            boolQuery.filter(rangeQuery);
        }
            //朝向
            if (rentSearch.getDirection() > 0) {
                boolQuery.filter(
                        QueryBuilders.termQuery(HouseIndexConstant.DIRECTION, rentSearch.getDirection())
                );
            }
            //租赁方式
            if (rentSearch.getRentWay() > -1) {
                boolQuery.filter(
                        QueryBuilders.termQuery(HouseIndexConstant.RENT_WAY, rentSearch.getRentWay())
                );
            }
           //卧室数量
            if (rentSearch.getRoom() > 0) {
                boolQuery.filter(QueryBuilders.termQuery(HouseIndexConstant.ROOM, rentSearch.getRoom()));
            }
        boolQuery.must(
                QueryBuilders.multiMatchQuery(rentSearch.getKeywords(),
                        HouseIndexConstant.TITLE,
                        HouseIndexConstant.TRAFFIC,
                        HouseIndexConstant.DISTRICT,
                        HouseIndexConstant.ROUND_SERVICE,
                        HouseIndexConstant.SUBWAY_LINE_NAME,
                        HouseIndexConstant.SUBWAY_STATION_NAME
                ));

        SearchRequestBuilder requestBuilder = this.esClient.prepareSearch(INDEX_NAME)
                .setTypes(INDEX_TYPE)
                .setQuery(boolQuery)
                .addSort(
                        HouseSort.getSortKey(rentSearch.getOrderBy()),
                        SortOrder.fromString(rentSearch.getOrderDirection())
                )
                .setFrom(rentSearch.getStart())
                .setSize(rentSearch.getSize())
                .setFetchSource(HouseIndexConstant.HOUSE_ID, null);
        logger.info(requestBuilder.toString());
        List<Long> houseIds = new ArrayList<>();
        SearchResponse response = requestBuilder.get();
        if (response.status() != RestStatus.OK) {
            logger.warn("Search status is no ok for " + requestBuilder);
            return new ServiceMultiResult<>(0, houseIds);
        }
        for (SearchHit hit : response.getHits()) {
            System.out.println(hit.getSource());
            houseIds.add(Longs.tryParse(String.valueOf(hit.getSource().get(HouseIndexConstant.HOUSE_ID))));
        }
        return new BaseServiceResponse<>(response.getHits().totalHits, houseIds);
    }